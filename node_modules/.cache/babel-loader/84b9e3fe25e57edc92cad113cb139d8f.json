{"ast":null,"code":"'use strict';\n\nvar A = module.exports;\n\nvar U = require('./utils.js');\n\nvar Keypairs = require('@root/keypairs');\n\nvar Enc = require('@root/encoding/bytes');\n\nvar agreers = {};\n\nA._getAccountKid = function (me, options) {\n  // It's just fine if there's no account, we'll go get the key id we need via the existing key\n  var kid = options.kid || options.account && options.account.key && options.account.key.kid;\n\n  if (kid) {\n    return Promise.resolve(kid);\n  } //return Promise.reject(new Error(\"must include KeyID\"));\n  // This is an idempotent request. It'll return the same account for the same public key.\n\n\n  return A._registerAccount(me, options).then(function (account) {\n    return account.key.kid;\n  });\n}; // ACME RFC Section 7.3 Account Creation\n\n/*\n {\n   \"protected\": base64url({\n     \"alg\": \"ES256\",\n     \"jwk\": {...},\n     \"nonce\": \"6S8IqOGY7eL2lsGoTZYifg\",\n     \"url\": \"https://example.com/acme/new-account\"\n   }),\n   \"payload\": base64url({\n     \"termsOfServiceAgreed\": true,\n     \"onlyReturnExisting\": false,\n     \"contact\": [\n       \"mailto:cert-admin@example.com\",\n       \"mailto:admin@example.com\"\n     ]\n   }),\n   \"signature\": \"RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I\"\n }\n*/\n\n\nA._registerAccount = function (me, options) {\n  //#console.debug('[ACME.js] accounts.create');\n  function agree(agreed) {\n    var err;\n\n    if (!agreed) {\n      err = new Error(\"must agree to '\" + me._tos + \"'\");\n      err.code = 'E_AGREE_TOS';\n      throw err;\n    }\n\n    return true;\n  }\n\n  function getAccount() {\n    return U._importKeypair(options.accountKey).then(function (pair) {\n      var contact;\n\n      if (options.contact) {\n        contact = options.contact.slice(0);\n      } else if (options.subscriberEmail) {\n        contact = ['mailto:' + options.subscriberEmail];\n      }\n\n      var accountRequest = {\n        termsOfServiceAgreed: true,\n        onlyReturnExisting: false,\n        contact: contact\n      };\n      var pub = pair.public;\n      return attachExtAcc(pub, accountRequest).then(function (accReq) {\n        var payload = JSON.stringify(accReq);\n        return U._jwsRequest(me, {\n          accountKey: options.accountKey,\n          url: me._directoryUrls.newAccount,\n          protected: {\n            kid: false,\n            jwk: pair.public\n          },\n          payload: Enc.strToBuf(payload)\n        }).then(function (resp) {\n          var account = resp.body;\n\n          if (resp.statusCode < 200 || resp.statusCode >= 300) {\n            if ('string' !== typeof account) {\n              account = JSON.stringify(account);\n            }\n\n            throw new Error('account error: ' + resp.statusCode + ' ' + account + '\\n' + payload);\n          } // the account id url is the \"kid\"\n\n\n          var kid = resp.headers.location;\n\n          if (!account) {\n            account = {\n              _emptyResponse: true\n            };\n          }\n\n          if (!account.key) {\n            account.key = {};\n          }\n\n          account.key.kid = kid;\n          return account;\n        });\n      });\n    });\n  } // for external accounts (probably useless, but spec'd)\n\n\n  function attachExtAcc(pubkey, accountRequest) {\n    if (!options.externalAccount) {\n      return Promise.resolve(accountRequest);\n    }\n\n    return Keypairs.signJws({\n      // TODO is HMAC the standard, or is this arbitrary?\n      secret: options.externalAccount.secret,\n      protected: {\n        alg: options.externalAccount.alg || 'HS256',\n        kid: options.externalAccount.id,\n        url: me._directoryUrls.newAccount\n      },\n      payload: Enc.strToBuf(JSON.stringify(pubkey))\n    }).then(function (jws) {\n      accountRequest.externalAccountBinding = jws;\n      return accountRequest;\n    });\n  }\n\n  return Promise.resolve().then(function () {\n    //#console.debug('[ACME.js] agreeToTerms');\n    var agreeToTerms = options.agreeToTerms;\n\n    if (!agreeToTerms) {\n      agreeToTerms = function (terms) {\n        if (agreers[options.subscriberEmail]) {\n          return true;\n        }\n\n        agreers[options.subscriberEmail] = true;\n        console.info();\n        console.info('By using this software you (' + options.subscriberEmail + ') are agreeing to the following:');\n        console.info('ACME Subscriber Agreement:', terms.acmeSubscriberTermsUrl);\n        console.info('Greenlock/ACME.js Terms of Use:', terms.acmeJsTermsUrl);\n        console.info();\n        return true;\n      };\n    } else if (true === agreeToTerms) {\n      agreeToTerms = function (terms) {\n        return terms && true;\n      };\n    }\n\n    return agreeToTerms({\n      acmeSubscriberTermsUrl: me._tos,\n      acmeJsTermsUrl: 'https://rootprojects.org/legal/#terms'\n    });\n  }).then(agree).then(getAccount);\n};","map":{"version":3,"sources":["C:/Users/xuwen/Desktop/INFO340/project-2-xuwensi/node_modules/@root/acme/account.js"],"names":["A","module","exports","U","require","Keypairs","Enc","agreers","_getAccountKid","me","options","kid","account","key","Promise","resolve","_registerAccount","then","agree","agreed","err","Error","_tos","code","getAccount","_importKeypair","accountKey","pair","contact","slice","subscriberEmail","accountRequest","termsOfServiceAgreed","onlyReturnExisting","pub","public","attachExtAcc","accReq","payload","JSON","stringify","_jwsRequest","url","_directoryUrls","newAccount","protected","jwk","strToBuf","resp","body","statusCode","headers","location","_emptyResponse","pubkey","externalAccount","signJws","secret","alg","id","jws","externalAccountBinding","agreeToTerms","terms","console","info","acmeSubscriberTermsUrl","acmeJsTermsUrl"],"mappings":"AAAA;;AAEA,IAAIA,CAAC,GAAGC,MAAM,CAACC,OAAf;;AACA,IAAIC,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,sBAAD,CAAjB;;AACA,IAAIG,OAAO,GAAG,EAAd;;AAEAP,CAAC,CAACQ,cAAF,GAAmB,UAASC,EAAT,EAAaC,OAAb,EAAsB;AACxC;AACA,MAAIC,GAAG,GACND,OAAO,CAACC,GAAR,IACCD,OAAO,CAACE,OAAR,IAAoBF,OAAO,CAACE,OAAR,CAAgBC,GAAhB,IAAuBH,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoBF,GAFjE;;AAIA,MAAIA,GAAJ,EAAS;AACR,WAAOG,OAAO,CAACC,OAAR,CAAgBJ,GAAhB,CAAP;AACA,GARuC,CAUxC;AACA;;;AACA,SAAOX,CAAC,CAACgB,gBAAF,CAAmBP,EAAnB,EAAuBC,OAAvB,EAAgCO,IAAhC,CAAqC,UAASL,OAAT,EAAkB;AAC7D,WAAOA,OAAO,CAACC,GAAR,CAAYF,GAAnB;AACA,GAFM,CAAP;AAGA,CAfD,C,CAiBA;;AACA;;;;;;;;;;;;;;;;;;;;;AAmBAX,CAAC,CAACgB,gBAAF,GAAqB,UAASP,EAAT,EAAaC,OAAb,EAAsB;AAC1C;AAEA,WAASQ,KAAT,CAAeC,MAAf,EAAuB;AACtB,QAAIC,GAAJ;;AACA,QAAI,CAACD,MAAL,EAAa;AACZC,MAAAA,GAAG,GAAG,IAAIC,KAAJ,CAAU,oBAAoBZ,EAAE,CAACa,IAAvB,GAA8B,GAAxC,CAAN;AACAF,MAAAA,GAAG,CAACG,IAAJ,GAAW,aAAX;AACA,YAAMH,GAAN;AACA;;AACD,WAAO,IAAP;AACA;;AAED,WAASI,UAAT,GAAsB;AACrB,WAAOrB,CAAC,CAACsB,cAAF,CAAiBf,OAAO,CAACgB,UAAzB,EAAqCT,IAArC,CAA0C,UAASU,IAAT,EAAe;AAC/D,UAAIC,OAAJ;;AACA,UAAIlB,OAAO,CAACkB,OAAZ,EAAqB;AACpBA,QAAAA,OAAO,GAAGlB,OAAO,CAACkB,OAAR,CAAgBC,KAAhB,CAAsB,CAAtB,CAAV;AACA,OAFD,MAEO,IAAInB,OAAO,CAACoB,eAAZ,EAA6B;AACnCF,QAAAA,OAAO,GAAG,CAAC,YAAYlB,OAAO,CAACoB,eAArB,CAAV;AACA;;AAED,UAAIC,cAAc,GAAG;AACpBC,QAAAA,oBAAoB,EAAE,IADF;AAEpBC,QAAAA,kBAAkB,EAAE,KAFA;AAGpBL,QAAAA,OAAO,EAAEA;AAHW,OAArB;AAMA,UAAIM,GAAG,GAAGP,IAAI,CAACQ,MAAf;AACA,aAAOC,YAAY,CAACF,GAAD,EAAMH,cAAN,CAAZ,CAAkCd,IAAlC,CAAuC,UAASoB,MAAT,EAAiB;AAC9D,YAAIC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAd;AACA,eAAOlC,CAAC,CAACsC,WAAF,CAAchC,EAAd,EAAkB;AACxBiB,UAAAA,UAAU,EAAEhB,OAAO,CAACgB,UADI;AAExBgB,UAAAA,GAAG,EAAEjC,EAAE,CAACkC,cAAH,CAAkBC,UAFC;AAGxBC,UAAAA,SAAS,EAAE;AAAElC,YAAAA,GAAG,EAAE,KAAP;AAAcmC,YAAAA,GAAG,EAAEnB,IAAI,CAACQ;AAAxB,WAHa;AAIxBG,UAAAA,OAAO,EAAEhC,GAAG,CAACyC,QAAJ,CAAaT,OAAb;AAJe,SAAlB,EAKJrB,IALI,CAKC,UAAS+B,IAAT,EAAe;AACtB,cAAIpC,OAAO,GAAGoC,IAAI,CAACC,IAAnB;;AAEA,cAAID,IAAI,CAACE,UAAL,GAAkB,GAAlB,IAAyBF,IAAI,CAACE,UAAL,IAAmB,GAAhD,EAAqD;AACpD,gBAAI,aAAa,OAAOtC,OAAxB,EAAiC;AAChCA,cAAAA,OAAO,GAAG2B,IAAI,CAACC,SAAL,CAAe5B,OAAf,CAAV;AACA;;AACD,kBAAM,IAAIS,KAAJ,CACL,oBACC2B,IAAI,CAACE,UADN,GAEC,GAFD,GAGCtC,OAHD,GAIC,IAJD,GAKC0B,OANI,CAAN;AAQA,WAfqB,CAiBtB;;;AACA,cAAI3B,GAAG,GAAGqC,IAAI,CAACG,OAAL,CAAaC,QAAvB;;AACA,cAAI,CAACxC,OAAL,EAAc;AACbA,YAAAA,OAAO,GAAG;AAAEyC,cAAAA,cAAc,EAAE;AAAlB,aAAV;AACA;;AACD,cAAI,CAACzC,OAAO,CAACC,GAAb,EAAkB;AACjBD,YAAAA,OAAO,CAACC,GAAR,GAAc,EAAd;AACA;;AACDD,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,GAAkBA,GAAlB;AACA,iBAAOC,OAAP;AACA,SAhCM,CAAP;AAiCA,OAnCM,CAAP;AAoCA,KAnDM,CAAP;AAoDA,GAlEyC,CAoE1C;;;AACA,WAASwB,YAAT,CAAsBkB,MAAtB,EAA8BvB,cAA9B,EAA8C;AAC7C,QAAI,CAACrB,OAAO,CAAC6C,eAAb,EAA8B;AAC7B,aAAOzC,OAAO,CAACC,OAAR,CAAgBgB,cAAhB,CAAP;AACA;;AAED,WAAO1B,QAAQ,CAACmD,OAAT,CAAiB;AACvB;AACAC,MAAAA,MAAM,EAAE/C,OAAO,CAAC6C,eAAR,CAAwBE,MAFT;AAGvBZ,MAAAA,SAAS,EAAE;AACVa,QAAAA,GAAG,EAAEhD,OAAO,CAAC6C,eAAR,CAAwBG,GAAxB,IAA+B,OAD1B;AAEV/C,QAAAA,GAAG,EAAED,OAAO,CAAC6C,eAAR,CAAwBI,EAFnB;AAGVjB,QAAAA,GAAG,EAAEjC,EAAE,CAACkC,cAAH,CAAkBC;AAHb,OAHY;AAQvBN,MAAAA,OAAO,EAAEhC,GAAG,CAACyC,QAAJ,CAAaR,IAAI,CAACC,SAAL,CAAec,MAAf,CAAb;AARc,KAAjB,EASJrC,IATI,CASC,UAAS2C,GAAT,EAAc;AACrB7B,MAAAA,cAAc,CAAC8B,sBAAf,GAAwCD,GAAxC;AACA,aAAO7B,cAAP;AACA,KAZM,CAAP;AAaA;;AAED,SAAOjB,OAAO,CAACC,OAAR,GACLE,IADK,CACA,YAAW;AAChB;AACA,QAAI6C,YAAY,GAAGpD,OAAO,CAACoD,YAA3B;;AACA,QAAI,CAACA,YAAL,EAAmB;AAClBA,MAAAA,YAAY,GAAG,UAASC,KAAT,EAAgB;AAC9B,YAAIxD,OAAO,CAACG,OAAO,CAACoB,eAAT,CAAX,EAAsC;AACrC,iBAAO,IAAP;AACA;;AACDvB,QAAAA,OAAO,CAACG,OAAO,CAACoB,eAAT,CAAP,GAAmC,IAAnC;AACAkC,QAAAA,OAAO,CAACC,IAAR;AACAD,QAAAA,OAAO,CAACC,IAAR,CACC,iCACCvD,OAAO,CAACoB,eADT,GAEC,kCAHF;AAKAkC,QAAAA,OAAO,CAACC,IAAR,CACC,4BADD,EAECF,KAAK,CAACG,sBAFP;AAIAF,QAAAA,OAAO,CAACC,IAAR,CACC,iCADD,EAECF,KAAK,CAACI,cAFP;AAIAH,QAAAA,OAAO,CAACC,IAAR;AACA,eAAO,IAAP;AACA,OArBD;AAsBA,KAvBD,MAuBO,IAAI,SAASH,YAAb,EAA2B;AACjCA,MAAAA,YAAY,GAAG,UAASC,KAAT,EAAgB;AAC9B,eAAOA,KAAK,IAAI,IAAhB;AACA,OAFD;AAGA;;AACD,WAAOD,YAAY,CAAC;AACnBI,MAAAA,sBAAsB,EAAEzD,EAAE,CAACa,IADR;AAEnB6C,MAAAA,cAAc,EAAE;AAFG,KAAD,CAAnB;AAIA,GApCK,EAqCLlD,IArCK,CAqCAC,KArCA,EAsCLD,IAtCK,CAsCAO,UAtCA,CAAP;AAuCA,CAhID","sourcesContent":["'use strict';\n\nvar A = module.exports;\nvar U = require('./utils.js');\n\nvar Keypairs = require('@root/keypairs');\nvar Enc = require('@root/encoding/bytes');\nvar agreers = {};\n\nA._getAccountKid = function(me, options) {\n\t// It's just fine if there's no account, we'll go get the key id we need via the existing key\n\tvar kid =\n\t\toptions.kid ||\n\t\t(options.account && (options.account.key && options.account.key.kid));\n\n\tif (kid) {\n\t\treturn Promise.resolve(kid);\n\t}\n\n\t//return Promise.reject(new Error(\"must include KeyID\"));\n\t// This is an idempotent request. It'll return the same account for the same public key.\n\treturn A._registerAccount(me, options).then(function(account) {\n\t\treturn account.key.kid;\n\t});\n};\n\n// ACME RFC Section 7.3 Account Creation\n/*\n {\n   \"protected\": base64url({\n     \"alg\": \"ES256\",\n     \"jwk\": {...},\n     \"nonce\": \"6S8IqOGY7eL2lsGoTZYifg\",\n     \"url\": \"https://example.com/acme/new-account\"\n   }),\n   \"payload\": base64url({\n     \"termsOfServiceAgreed\": true,\n     \"onlyReturnExisting\": false,\n     \"contact\": [\n       \"mailto:cert-admin@example.com\",\n       \"mailto:admin@example.com\"\n     ]\n   }),\n   \"signature\": \"RZPOnYoPs1PhjszF...-nh6X1qtOFPB519I\"\n }\n*/\nA._registerAccount = function(me, options) {\n\t//#console.debug('[ACME.js] accounts.create');\n\n\tfunction agree(agreed) {\n\t\tvar err;\n\t\tif (!agreed) {\n\t\t\terr = new Error(\"must agree to '\" + me._tos + \"'\");\n\t\t\terr.code = 'E_AGREE_TOS';\n\t\t\tthrow err;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction getAccount() {\n\t\treturn U._importKeypair(options.accountKey).then(function(pair) {\n\t\t\tvar contact;\n\t\t\tif (options.contact) {\n\t\t\t\tcontact = options.contact.slice(0);\n\t\t\t} else if (options.subscriberEmail) {\n\t\t\t\tcontact = ['mailto:' + options.subscriberEmail];\n\t\t\t}\n\n\t\t\tvar accountRequest = {\n\t\t\t\ttermsOfServiceAgreed: true,\n\t\t\t\tonlyReturnExisting: false,\n\t\t\t\tcontact: contact\n\t\t\t};\n\n\t\t\tvar pub = pair.public;\n\t\t\treturn attachExtAcc(pub, accountRequest).then(function(accReq) {\n\t\t\t\tvar payload = JSON.stringify(accReq);\n\t\t\t\treturn U._jwsRequest(me, {\n\t\t\t\t\taccountKey: options.accountKey,\n\t\t\t\t\turl: me._directoryUrls.newAccount,\n\t\t\t\t\tprotected: { kid: false, jwk: pair.public },\n\t\t\t\t\tpayload: Enc.strToBuf(payload)\n\t\t\t\t}).then(function(resp) {\n\t\t\t\t\tvar account = resp.body;\n\n\t\t\t\t\tif (resp.statusCode < 200 || resp.statusCode >= 300) {\n\t\t\t\t\t\tif ('string' !== typeof account) {\n\t\t\t\t\t\t\taccount = JSON.stringify(account);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'account error: ' +\n\t\t\t\t\t\t\t\tresp.statusCode +\n\t\t\t\t\t\t\t\t' ' +\n\t\t\t\t\t\t\t\taccount +\n\t\t\t\t\t\t\t\t'\\n' +\n\t\t\t\t\t\t\t\tpayload\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// the account id url is the \"kid\"\n\t\t\t\t\tvar kid = resp.headers.location;\n\t\t\t\t\tif (!account) {\n\t\t\t\t\t\taccount = { _emptyResponse: true };\n\t\t\t\t\t}\n\t\t\t\t\tif (!account.key) {\n\t\t\t\t\t\taccount.key = {};\n\t\t\t\t\t}\n\t\t\t\t\taccount.key.kid = kid;\n\t\t\t\t\treturn account;\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t// for external accounts (probably useless, but spec'd)\n\tfunction attachExtAcc(pubkey, accountRequest) {\n\t\tif (!options.externalAccount) {\n\t\t\treturn Promise.resolve(accountRequest);\n\t\t}\n\n\t\treturn Keypairs.signJws({\n\t\t\t// TODO is HMAC the standard, or is this arbitrary?\n\t\t\tsecret: options.externalAccount.secret,\n\t\t\tprotected: {\n\t\t\t\talg: options.externalAccount.alg || 'HS256',\n\t\t\t\tkid: options.externalAccount.id,\n\t\t\t\turl: me._directoryUrls.newAccount\n\t\t\t},\n\t\t\tpayload: Enc.strToBuf(JSON.stringify(pubkey))\n\t\t}).then(function(jws) {\n\t\t\taccountRequest.externalAccountBinding = jws;\n\t\t\treturn accountRequest;\n\t\t});\n\t}\n\n\treturn Promise.resolve()\n\t\t.then(function() {\n\t\t\t//#console.debug('[ACME.js] agreeToTerms');\n\t\t\tvar agreeToTerms = options.agreeToTerms;\n\t\t\tif (!agreeToTerms) {\n\t\t\t\tagreeToTerms = function(terms) {\n\t\t\t\t\tif (agreers[options.subscriberEmail]) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tagreers[options.subscriberEmail] = true;\n\t\t\t\t\tconsole.info();\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t'By using this software you (' +\n\t\t\t\t\t\t\toptions.subscriberEmail +\n\t\t\t\t\t\t\t') are agreeing to the following:'\n\t\t\t\t\t);\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t'ACME Subscriber Agreement:',\n\t\t\t\t\t\tterms.acmeSubscriberTermsUrl\n\t\t\t\t\t);\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t'Greenlock/ACME.js Terms of Use:',\n\t\t\t\t\t\tterms.acmeJsTermsUrl\n\t\t\t\t\t);\n\t\t\t\t\tconsole.info();\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t} else if (true === agreeToTerms) {\n\t\t\t\tagreeToTerms = function(terms) {\n\t\t\t\t\treturn terms && true;\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn agreeToTerms({\n\t\t\t\tacmeSubscriberTermsUrl: me._tos,\n\t\t\t\tacmeJsTermsUrl: 'https://rootprojects.org/legal/#terms'\n\t\t\t});\n\t\t})\n\t\t.then(agree)\n\t\t.then(getAccount);\n};\n"]},"metadata":{},"sourceType":"script"}