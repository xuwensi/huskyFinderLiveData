{"ast":null,"code":"'use strict';\n\nvar native = module.exports; // XXX received from caller\n\nvar EC = native;\n\nnative.generate = function (opts) {\n  var wcOpts = {};\n\n  if (!opts) {\n    opts = {};\n  }\n\n  if (!opts.kty) {\n    opts.kty = 'EC';\n  } // ECDSA has only the P curves and an associated bitlength\n\n\n  wcOpts.name = 'ECDSA';\n\n  if (!opts.namedCurve) {\n    opts.namedCurve = 'P-256';\n  }\n\n  wcOpts.namedCurve = opts.namedCurve; // true for supported curves\n\n  if (/256/.test(wcOpts.namedCurve)) {\n    wcOpts.namedCurve = 'P-256';\n    wcOpts.hash = {\n      name: 'SHA-256'\n    };\n  } else if (/384/.test(wcOpts.namedCurve)) {\n    wcOpts.namedCurve = 'P-384';\n    wcOpts.hash = {\n      name: 'SHA-384'\n    };\n  } else {\n    return Promise.Reject(new Error(\"'\" + wcOpts.namedCurve + \"' is not an NIST approved ECDSA namedCurve. \" + \" Please choose either 'P-256' or 'P-384'. \" + // XXX received from caller\n    EC._stance));\n  }\n\n  var extractable = true;\n  return window.crypto.subtle.generateKey(wcOpts, extractable, ['sign', 'verify']).then(function (result) {\n    return window.crypto.subtle.exportKey('jwk', result.privateKey).then(function (privJwk) {\n      privJwk.key_ops = undefined;\n      privJwk.ext = undefined;\n      return {\n        private: privJwk,\n        // XXX received from caller\n        public: EC.neuter({\n          jwk: privJwk\n        })\n      };\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/xuwen/Desktop/INFO340/project-2-xuwensi/node_modules/@root/keypairs/lib/browser/ecdsa.js"],"names":["native","module","exports","EC","generate","opts","wcOpts","kty","name","namedCurve","test","hash","Promise","Reject","Error","_stance","extractable","window","crypto","subtle","generateKey","then","result","exportKey","privateKey","privJwk","key_ops","undefined","ext","private","public","neuter","jwk"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,MAAM,CAACC,OAApB,C,CACA;;AACA,IAAIC,EAAE,GAAGH,MAAT;;AAEAA,MAAM,CAACI,QAAP,GAAkB,UAASC,IAAT,EAAe;AAChC,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAI,CAACD,IAAL,EAAW;AACVA,IAAAA,IAAI,GAAG,EAAP;AACA;;AACD,MAAI,CAACA,IAAI,CAACE,GAAV,EAAe;AACdF,IAAAA,IAAI,CAACE,GAAL,GAAW,IAAX;AACA,GAP+B,CAShC;;;AACAD,EAAAA,MAAM,CAACE,IAAP,GAAc,OAAd;;AACA,MAAI,CAACH,IAAI,CAACI,UAAV,EAAsB;AACrBJ,IAAAA,IAAI,CAACI,UAAL,GAAkB,OAAlB;AACA;;AACDH,EAAAA,MAAM,CAACG,UAAP,GAAoBJ,IAAI,CAACI,UAAzB,CAdgC,CAcK;;AACrC,MAAI,MAAMC,IAAN,CAAWJ,MAAM,CAACG,UAAlB,CAAJ,EAAmC;AAClCH,IAAAA,MAAM,CAACG,UAAP,GAAoB,OAApB;AACAH,IAAAA,MAAM,CAACK,IAAP,GAAc;AAAEH,MAAAA,IAAI,EAAE;AAAR,KAAd;AACA,GAHD,MAGO,IAAI,MAAME,IAAN,CAAWJ,MAAM,CAACG,UAAlB,CAAJ,EAAmC;AACzCH,IAAAA,MAAM,CAACG,UAAP,GAAoB,OAApB;AACAH,IAAAA,MAAM,CAACK,IAAP,GAAc;AAAEH,MAAAA,IAAI,EAAE;AAAR,KAAd;AACA,GAHM,MAGA;AACN,WAAOI,OAAO,CAACC,MAAR,CACN,IAAIC,KAAJ,CACC,MACCR,MAAM,CAACG,UADR,GAEC,8CAFD,GAGC,4CAHD,GAIC;AACAN,IAAAA,EAAE,CAACY,OANL,CADM,CAAP;AAUA;;AAED,MAAIC,WAAW,GAAG,IAAlB;AACA,SAAOC,MAAM,CAACC,MAAP,CAAcC,MAAd,CACLC,WADK,CACOd,MADP,EACeU,WADf,EAC4B,CAAC,MAAD,EAAS,QAAT,CAD5B,EAELK,IAFK,CAEA,UAASC,MAAT,EAAiB;AACtB,WAAOL,MAAM,CAACC,MAAP,CAAcC,MAAd,CACLI,SADK,CACK,KADL,EACYD,MAAM,CAACE,UADnB,EAELH,IAFK,CAEA,UAASI,OAAT,EAAkB;AACvBA,MAAAA,OAAO,CAACC,OAAR,GAAkBC,SAAlB;AACAF,MAAAA,OAAO,CAACG,GAAR,GAAcD,SAAd;AACA,aAAO;AACNE,QAAAA,OAAO,EAAEJ,OADH;AAEN;AACAK,QAAAA,MAAM,EAAE3B,EAAE,CAAC4B,MAAH,CAAU;AAAEC,UAAAA,GAAG,EAAEP;AAAP,SAAV;AAHF,OAAP;AAKA,KAVK,CAAP;AAWA,GAdK,CAAP;AAeA,CAlDD","sourcesContent":["'use strict';\n\nvar native = module.exports;\n// XXX received from caller\nvar EC = native;\n\nnative.generate = function(opts) {\n\tvar wcOpts = {};\n\tif (!opts) {\n\t\topts = {};\n\t}\n\tif (!opts.kty) {\n\t\topts.kty = 'EC';\n\t}\n\n\t// ECDSA has only the P curves and an associated bitlength\n\twcOpts.name = 'ECDSA';\n\tif (!opts.namedCurve) {\n\t\topts.namedCurve = 'P-256';\n\t}\n\twcOpts.namedCurve = opts.namedCurve; // true for supported curves\n\tif (/256/.test(wcOpts.namedCurve)) {\n\t\twcOpts.namedCurve = 'P-256';\n\t\twcOpts.hash = { name: 'SHA-256' };\n\t} else if (/384/.test(wcOpts.namedCurve)) {\n\t\twcOpts.namedCurve = 'P-384';\n\t\twcOpts.hash = { name: 'SHA-384' };\n\t} else {\n\t\treturn Promise.Reject(\n\t\t\tnew Error(\n\t\t\t\t\"'\" +\n\t\t\t\t\twcOpts.namedCurve +\n\t\t\t\t\t\"' is not an NIST approved ECDSA namedCurve. \" +\n\t\t\t\t\t\" Please choose either 'P-256' or 'P-384'. \" +\n\t\t\t\t\t// XXX received from caller\n\t\t\t\t\tEC._stance\n\t\t\t)\n\t\t);\n\t}\n\n\tvar extractable = true;\n\treturn window.crypto.subtle\n\t\t.generateKey(wcOpts, extractable, ['sign', 'verify'])\n\t\t.then(function(result) {\n\t\t\treturn window.crypto.subtle\n\t\t\t\t.exportKey('jwk', result.privateKey)\n\t\t\t\t.then(function(privJwk) {\n\t\t\t\t\tprivJwk.key_ops = undefined;\n\t\t\t\t\tprivJwk.ext = undefined;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tprivate: privJwk,\n\t\t\t\t\t\t// XXX received from caller\n\t\t\t\t\t\tpublic: EC.neuter({ jwk: privJwk })\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t});\n};\n"]},"metadata":{},"sourceType":"script"}