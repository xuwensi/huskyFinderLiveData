{"ast":null,"code":"/*global Promise*/\n'use strict';\n\nvar Enc = require('@root/encoding');\n\nvar EC = module.exports;\n\nvar native = require('./lib/node/ecdsa.js'); // TODO SSH\n\n\nvar SSH;\n\nvar X509 = require('@root/x509');\n\nvar PEM = require('@root/pem'); //var SSH = require('./ssh-keys.js');\n\n\nvar sha2 = require('./lib/node/sha2.js'); // 1.2.840.10045.3.1.7\n// prime256v1 (ANSI X9.62 named elliptic curve)\n\n\nvar OBJ_ID_EC = '06 08 2A8648CE3D030107'.replace(/\\s+/g, '').toLowerCase(); // 1.3.132.0.34\n// secp384r1 (SECG (Certicom) named elliptic curve)\n\nvar OBJ_ID_EC_384 = '06 05 2B81040022'.replace(/\\s+/g, '').toLowerCase();\nEC._stance = \"We take the stance that if you're knowledgeable enough to\" + \" properly and securely use non-standard crypto then you shouldn't need Bluecrypt anyway.\";\nnative._stance = EC._stance;\nEC._universal = 'Bluecrypt only supports crypto with standard cross-browser and cross-platform support.';\nEC.generate = native.generate;\n\nEC.export = function (opts) {\n  return Promise.resolve().then(function () {\n    if (!opts || !opts.jwk || 'object' !== typeof opts.jwk) {\n      throw new Error('must pass { jwk: jwk } as a JSON object');\n    }\n\n    var jwk = JSON.parse(JSON.stringify(opts.jwk));\n    var format = opts.format;\n\n    if (opts.public || -1 !== ['spki', 'pkix', 'ssh', 'rfc4716'].indexOf(format)) {\n      jwk.d = null;\n    }\n\n    if ('EC' !== jwk.kty) {\n      throw new Error(\"options.jwk.kty must be 'EC' for EC keys\");\n    }\n\n    if (!jwk.d) {\n      if (!format || -1 !== ['spki', 'pkix'].indexOf(format)) {\n        format = 'spki';\n      } else if (-1 !== ['ssh', 'rfc4716'].indexOf(format)) {\n        format = 'ssh';\n      } else {\n        throw new Error(\"options.format must be 'spki' or 'ssh' for public EC keys, not (\" + typeof format + ') ' + format);\n      }\n    } else {\n      if (!format || 'sec1' === format) {\n        format = 'sec1';\n      } else if ('pkcs8' !== format) {\n        throw new Error(\"options.format must be 'sec1' or 'pkcs8' for private EC keys, not '\" + format + \"'\");\n      }\n    }\n\n    if (-1 === ['P-256', 'P-384'].indexOf(jwk.crv)) {\n      throw new Error(\"options.jwk.crv must be either P-256 or P-384 for EC keys, not '\" + jwk.crv + \"'\");\n    }\n\n    if (!jwk.y) {\n      throw new Error('options.jwk.y must be a urlsafe base64-encoded either P-256 or P-384');\n    }\n\n    if ('sec1' === format) {\n      return PEM.packBlock({\n        type: 'EC PRIVATE KEY',\n        bytes: X509.packSec1(jwk)\n      });\n    } else if ('pkcs8' === format) {\n      return PEM.packBlock({\n        type: 'PRIVATE KEY',\n        bytes: X509.packPkcs8(jwk)\n      });\n    } else if (-1 !== ['spki', 'pkix'].indexOf(format)) {\n      return PEM.packBlock({\n        type: 'PUBLIC KEY',\n        bytes: X509.packSpki(jwk)\n      });\n    } else if (-1 !== ['ssh', 'rfc4716'].indexOf(format)) {\n      return SSH.packSsh(jwk);\n    } else {\n      throw new Error('Sanity Error: reached unreachable code block with format: ' + format);\n    }\n  });\n};\n\nnative.export = EC.export;\n\nEC.import = function (opts) {\n  return Promise.resolve().then(function () {\n    if (!opts || !opts.pem || 'string' !== typeof opts.pem) {\n      throw new Error('must pass { pem: pem } as a string');\n    }\n\n    if (0 === opts.pem.indexOf('ecdsa-sha2-')) {\n      //return SSH.parseSsh(opts.pem);\n      throw new Error('SSH not yet re-supported');\n    }\n\n    var pem = opts.pem;\n    var u8 = PEM.parseBlock(pem).bytes;\n    var hex = Enc.bufToHex(u8);\n    var jwk = {\n      kty: 'EC',\n      crv: null,\n      x: null,\n      y: null\n    }; //console.log();\n\n    if (-1 !== hex.indexOf(OBJ_ID_EC) || -1 !== hex.indexOf(OBJ_ID_EC_384)) {\n      if (-1 !== hex.indexOf(OBJ_ID_EC_384)) {\n        jwk.crv = 'P-384';\n      } else {\n        jwk.crv = 'P-256';\n      } // PKCS8\n\n\n      if (0x02 === u8[3] && 0x30 === u8[6] && 0x06 === u8[8]) {\n        //console.log(\"PKCS8\", u8[3].toString(16), u8[6].toString(16), u8[8].toString(16));\n        jwk = X509.parsePkcs8(u8, jwk); // EC-only\n      } else if (0x02 === u8[2] && 0x04 === u8[5] && 0xa0 === u8[39]) {\n        //console.log(\"EC---\", u8[2].toString(16), u8[5].toString(16), u8[39].toString(16));\n        jwk = X509.parseSec1(u8, jwk); // EC-only\n      } else if (0x02 === u8[3] && 0x04 === u8[6] && 0xa0 === u8[56]) {\n        //console.log(\"EC---\", u8[3].toString(16), u8[6].toString(16), u8[56].toString(16));\n        jwk = X509.parseSec1(u8, jwk); // SPKI/PKIK (Public)\n      } else if (0x30 === u8[2] && 0x06 === u8[4] && 0x06 === u8[13]) {\n        //console.log(\"SPKI-\", u8[2].toString(16), u8[4].toString(16), u8[13].toString(16));\n        jwk = X509.parseSpki(u8, jwk); // Error\n      } else {\n        //console.log(\"PKCS8\", u8[3].toString(16), u8[6].toString(16), u8[8].toString(16));\n        //console.log(\"EC---\", u8[2].toString(16), u8[5].toString(16), u8[39].toString(16));\n        //console.log(\"EC---\", u8[3].toString(16), u8[6].toString(16), u8[56].toString(16));\n        //console.log(\"SPKI-\", u8[2].toString(16), u8[4].toString(16), u8[13].toString(16));\n        throw new Error('unrecognized key format');\n      }\n    } else {\n      throw new Error('Supported key types are P-256 and P-384');\n    }\n\n    if (opts.public) {\n      if (true !== opts.public) {\n        throw new Error('options.public must be either `true` or `false` not (' + typeof opts.public + \") '\" + opts.public + \"'\");\n      }\n\n      delete jwk.d;\n    }\n\n    return jwk;\n  });\n};\n\nnative.import = EC.import;\n\nEC.pack = function (opts) {\n  return Promise.resolve().then(function () {\n    return EC.export(opts);\n  });\n}; // Chopping off the private parts is now part of the public API.\n// I thought it sounded a little too crude at first, but it really is the best name in every possible way.\n\n\nEC.neuter = function (opts) {\n  // trying to find the best balance of an immutable copy with custom attributes\n  var jwk = {};\n  Object.keys(opts.jwk).forEach(function (k) {\n    if ('undefined' === typeof opts.jwk[k]) {\n      return;\n    } // ignore EC private parts\n\n\n    if ('d' === k) {\n      return;\n    }\n\n    jwk[k] = JSON.parse(JSON.stringify(opts.jwk[k]));\n  });\n  return jwk;\n};\n\nnative.neuter = EC.neuter; // https://stackoverflow.com/questions/42588786/how-to-fingerprint-a-jwk\n\nEC.__thumbprint = function (jwk) {\n  // Use the same entropy for SHA as for key\n  var alg = 'SHA-256';\n\n  if (/384/.test(jwk.crv)) {\n    alg = 'SHA-384';\n  }\n\n  var payload = '{\"crv\":\"' + jwk.crv + '\",\"kty\":\"EC\",\"x\":\"' + jwk.x + '\",\"y\":\"' + jwk.y + '\"}';\n  return sha2.sum(alg, payload).then(function (hash) {\n    return Enc.bufToUrlBase64(Uint8Array.from(hash));\n  });\n};\n\nEC.thumbprint = function (opts) {\n  return Promise.resolve().then(function () {\n    var jwk;\n\n    if ('EC' === opts.kty) {\n      jwk = opts;\n    } else if (opts.jwk) {\n      jwk = opts.jwk;\n    } else {\n      return native.import(opts).then(function (jwk) {\n        return EC.__thumbprint(jwk);\n      });\n    }\n\n    return EC.__thumbprint(jwk);\n  });\n};","map":{"version":3,"sources":["C:/Users/xuwen/Desktop/INFO340/project-2-xuwensi/node_modules/@root/keypairs/ecdsa.js"],"names":["Enc","require","EC","module","exports","native","SSH","X509","PEM","sha2","OBJ_ID_EC","replace","toLowerCase","OBJ_ID_EC_384","_stance","_universal","generate","export","opts","Promise","resolve","then","jwk","Error","JSON","parse","stringify","format","public","indexOf","d","kty","crv","y","packBlock","type","bytes","packSec1","packPkcs8","packSpki","packSsh","import","pem","u8","parseBlock","hex","bufToHex","x","parsePkcs8","parseSec1","parseSpki","pack","neuter","Object","keys","forEach","k","__thumbprint","alg","test","payload","sum","hash","bufToUrlBase64","Uint8Array","from","thumbprint"],"mappings":"AAAA;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,gBAAD,CAAjB;;AAEA,IAAIC,EAAE,GAAGC,MAAM,CAACC,OAAhB;;AACA,IAAIC,MAAM,GAAGJ,OAAO,CAAC,qBAAD,CAApB,C,CAEA;;;AACA,IAAIK,GAAJ;;AAEA,IAAIC,IAAI,GAAGN,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAIO,GAAG,GAAGP,OAAO,CAAC,WAAD,CAAjB,C,CACA;;;AACA,IAAIQ,IAAI,GAAGR,OAAO,CAAC,oBAAD,CAAlB,C,CAEA;AACA;;;AACA,IAAIS,SAAS,GAAG,yBAAyBC,OAAzB,CAAiC,MAAjC,EAAyC,EAAzC,EAA6CC,WAA7C,EAAhB,C,CACA;AACA;;AACA,IAAIC,aAAa,GAAG,mBAAmBF,OAAnB,CAA2B,MAA3B,EAAmC,EAAnC,EAAuCC,WAAvC,EAApB;AAEAV,EAAE,CAACY,OAAH,GACC,8DACA,0FAFD;AAGAT,MAAM,CAACS,OAAP,GAAiBZ,EAAE,CAACY,OAApB;AACAZ,EAAE,CAACa,UAAH,GACC,wFADD;AAEAb,EAAE,CAACc,QAAH,GAAcX,MAAM,CAACW,QAArB;;AAEAd,EAAE,CAACe,MAAH,GAAY,UAASC,IAAT,EAAe;AAC1B,SAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,QAAI,CAACH,IAAD,IAAS,CAACA,IAAI,CAACI,GAAf,IAAsB,aAAa,OAAOJ,IAAI,CAACI,GAAnD,EAAwD;AACvD,YAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACA;;AACD,QAAID,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,IAAI,CAACI,GAApB,CAAX,CAAV;AACA,QAAIK,MAAM,GAAGT,IAAI,CAACS,MAAlB;;AACA,QACCT,IAAI,CAACU,MAAL,IACA,CAAC,CAAD,KAAO,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,SAAxB,EAAmCC,OAAnC,CAA2CF,MAA3C,CAFR,EAGE;AACDL,MAAAA,GAAG,CAACQ,CAAJ,GAAQ,IAAR;AACA;;AACD,QAAI,SAASR,GAAG,CAACS,GAAjB,EAAsB;AACrB,YAAM,IAAIR,KAAJ,CAAU,0CAAV,CAAN;AACA;;AACD,QAAI,CAACD,GAAG,CAACQ,CAAT,EAAY;AACX,UAAI,CAACH,MAAD,IAAW,CAAC,CAAD,KAAO,CAAC,MAAD,EAAS,MAAT,EAAiBE,OAAjB,CAAyBF,MAAzB,CAAtB,EAAwD;AACvDA,QAAAA,MAAM,GAAG,MAAT;AACA,OAFD,MAEO,IAAI,CAAC,CAAD,KAAO,CAAC,KAAD,EAAQ,SAAR,EAAmBE,OAAnB,CAA2BF,MAA3B,CAAX,EAA+C;AACrDA,QAAAA,MAAM,GAAG,KAAT;AACA,OAFM,MAEA;AACN,cAAM,IAAIJ,KAAJ,CACL,qEACC,OAAOI,MADR,GAEC,IAFD,GAGCA,MAJI,CAAN;AAMA;AACD,KAbD,MAaO;AACN,UAAI,CAACA,MAAD,IAAW,WAAWA,MAA1B,EAAkC;AACjCA,QAAAA,MAAM,GAAG,MAAT;AACA,OAFD,MAEO,IAAI,YAAYA,MAAhB,EAAwB;AAC9B,cAAM,IAAIJ,KAAJ,CACL,wEACCI,MADD,GAEC,GAHI,CAAN;AAKA;AACD;;AACD,QAAI,CAAC,CAAD,KAAO,CAAC,OAAD,EAAU,OAAV,EAAmBE,OAAnB,CAA2BP,GAAG,CAACU,GAA/B,CAAX,EAAgD;AAC/C,YAAM,IAAIT,KAAJ,CACL,qEACCD,GAAG,CAACU,GADL,GAEC,GAHI,CAAN;AAKA;;AACD,QAAI,CAACV,GAAG,CAACW,CAAT,EAAY;AACX,YAAM,IAAIV,KAAJ,CACL,sEADK,CAAN;AAGA;;AAED,QAAI,WAAWI,MAAf,EAAuB;AACtB,aAAOnB,GAAG,CAAC0B,SAAJ,CAAc;AACpBC,QAAAA,IAAI,EAAE,gBADc;AAEpBC,QAAAA,KAAK,EAAE7B,IAAI,CAAC8B,QAAL,CAAcf,GAAd;AAFa,OAAd,CAAP;AAIA,KALD,MAKO,IAAI,YAAYK,MAAhB,EAAwB;AAC9B,aAAOnB,GAAG,CAAC0B,SAAJ,CAAc;AACpBC,QAAAA,IAAI,EAAE,aADc;AAEpBC,QAAAA,KAAK,EAAE7B,IAAI,CAAC+B,SAAL,CAAehB,GAAf;AAFa,OAAd,CAAP;AAIA,KALM,MAKA,IAAI,CAAC,CAAD,KAAO,CAAC,MAAD,EAAS,MAAT,EAAiBO,OAAjB,CAAyBF,MAAzB,CAAX,EAA6C;AACnD,aAAOnB,GAAG,CAAC0B,SAAJ,CAAc;AACpBC,QAAAA,IAAI,EAAE,YADc;AAEpBC,QAAAA,KAAK,EAAE7B,IAAI,CAACgC,QAAL,CAAcjB,GAAd;AAFa,OAAd,CAAP;AAIA,KALM,MAKA,IAAI,CAAC,CAAD,KAAO,CAAC,KAAD,EAAQ,SAAR,EAAmBO,OAAnB,CAA2BF,MAA3B,CAAX,EAA+C;AACrD,aAAOrB,GAAG,CAACkC,OAAJ,CAAYlB,GAAZ,CAAP;AACA,KAFM,MAEA;AACN,YAAM,IAAIC,KAAJ,CACL,+DACCI,MAFI,CAAN;AAIA;AACD,GA3EM,CAAP;AA4EA,CA7ED;;AA8EAtB,MAAM,CAACY,MAAP,GAAgBf,EAAE,CAACe,MAAnB;;AAEAf,EAAE,CAACuC,MAAH,GAAY,UAASvB,IAAT,EAAe;AAC1B,SAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,QAAI,CAACH,IAAD,IAAS,CAACA,IAAI,CAACwB,GAAf,IAAsB,aAAa,OAAOxB,IAAI,CAACwB,GAAnD,EAAwD;AACvD,YAAM,IAAInB,KAAJ,CAAU,oCAAV,CAAN;AACA;;AACD,QAAI,MAAML,IAAI,CAACwB,GAAL,CAASb,OAAT,CAAiB,aAAjB,CAAV,EAA2C;AAC1C;AACA,YAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;AACA;;AACD,QAAImB,GAAG,GAAGxB,IAAI,CAACwB,GAAf;AACA,QAAIC,EAAE,GAAGnC,GAAG,CAACoC,UAAJ,CAAeF,GAAf,EAAoBN,KAA7B;AACA,QAAIS,GAAG,GAAG7C,GAAG,CAAC8C,QAAJ,CAAaH,EAAb,CAAV;AACA,QAAIrB,GAAG,GAAG;AAAES,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,GAAG,EAAE,IAAlB;AAAwBe,MAAAA,CAAC,EAAE,IAA3B;AAAiCd,MAAAA,CAAC,EAAE;AAApC,KAAV,CAXwC,CAaxC;;AACA,QACC,CAAC,CAAD,KAAOY,GAAG,CAAChB,OAAJ,CAAYnB,SAAZ,CAAP,IACA,CAAC,CAAD,KAAOmC,GAAG,CAAChB,OAAJ,CAAYhB,aAAZ,CAFR,EAGE;AACD,UAAI,CAAC,CAAD,KAAOgC,GAAG,CAAChB,OAAJ,CAAYhB,aAAZ,CAAX,EAAuC;AACtCS,QAAAA,GAAG,CAACU,GAAJ,GAAU,OAAV;AACA,OAFD,MAEO;AACNV,QAAAA,GAAG,CAACU,GAAJ,GAAU,OAAV;AACA,OALA,CAOD;;;AACA,UAAI,SAASW,EAAE,CAAC,CAAD,CAAX,IAAkB,SAASA,EAAE,CAAC,CAAD,CAA7B,IAAoC,SAASA,EAAE,CAAC,CAAD,CAAnD,EAAwD;AACvD;AACArB,QAAAA,GAAG,GAAGf,IAAI,CAACyC,UAAL,CAAgBL,EAAhB,EAAoBrB,GAApB,CAAN,CAFuD,CAGvD;AACA,OAJD,MAIO,IAAI,SAASqB,EAAE,CAAC,CAAD,CAAX,IAAkB,SAASA,EAAE,CAAC,CAAD,CAA7B,IAAoC,SAASA,EAAE,CAAC,EAAD,CAAnD,EAAyD;AAC/D;AACArB,QAAAA,GAAG,GAAGf,IAAI,CAAC0C,SAAL,CAAeN,EAAf,EAAmBrB,GAAnB,CAAN,CAF+D,CAG/D;AACA,OAJM,MAIA,IAAI,SAASqB,EAAE,CAAC,CAAD,CAAX,IAAkB,SAASA,EAAE,CAAC,CAAD,CAA7B,IAAoC,SAASA,EAAE,CAAC,EAAD,CAAnD,EAAyD;AAC/D;AACArB,QAAAA,GAAG,GAAGf,IAAI,CAAC0C,SAAL,CAAeN,EAAf,EAAmBrB,GAAnB,CAAN,CAF+D,CAG/D;AACA,OAJM,MAIA,IAAI,SAASqB,EAAE,CAAC,CAAD,CAAX,IAAkB,SAASA,EAAE,CAAC,CAAD,CAA7B,IAAoC,SAASA,EAAE,CAAC,EAAD,CAAnD,EAAyD;AAC/D;AACArB,QAAAA,GAAG,GAAGf,IAAI,CAAC2C,SAAL,CAAeP,EAAf,EAAmBrB,GAAnB,CAAN,CAF+D,CAG/D;AACA,OAJM,MAIA;AACN;AACA;AACA;AACA;AACA,cAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACA;AACD,KAlCD,MAkCO;AACN,YAAM,IAAIA,KAAJ,CAAU,yCAAV,CAAN;AACA;;AACD,QAAIL,IAAI,CAACU,MAAT,EAAiB;AAChB,UAAI,SAASV,IAAI,CAACU,MAAlB,EAA0B;AACzB,cAAM,IAAIL,KAAJ,CACL,0DACC,OAAOL,IAAI,CAACU,MADb,GAEC,KAFD,GAGCV,IAAI,CAACU,MAHN,GAIC,GALI,CAAN;AAOA;;AACD,aAAON,GAAG,CAACQ,CAAX;AACA;;AACD,WAAOR,GAAP;AACA,GAhEM,CAAP;AAiEA,CAlED;;AAmEAjB,MAAM,CAACoC,MAAP,GAAgBvC,EAAE,CAACuC,MAAnB;;AAEAvC,EAAE,CAACiD,IAAH,GAAU,UAASjC,IAAT,EAAe;AACxB,SAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,WAAOnB,EAAE,CAACe,MAAH,CAAUC,IAAV,CAAP;AACA,GAFM,CAAP;AAGA,CAJD,C,CAMA;AACA;;;AACAhB,EAAE,CAACkD,MAAH,GAAY,UAASlC,IAAT,EAAe;AAC1B;AACA,MAAII,GAAG,GAAG,EAAV;AACA+B,EAAAA,MAAM,CAACC,IAAP,CAAYpC,IAAI,CAACI,GAAjB,EAAsBiC,OAAtB,CAA8B,UAASC,CAAT,EAAY;AACzC,QAAI,gBAAgB,OAAOtC,IAAI,CAACI,GAAL,CAASkC,CAAT,CAA3B,EAAwC;AACvC;AACA,KAHwC,CAIzC;;;AACA,QAAI,QAAQA,CAAZ,EAAe;AACd;AACA;;AACDlC,IAAAA,GAAG,CAACkC,CAAD,CAAH,GAAShC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,IAAI,CAACI,GAAL,CAASkC,CAAT,CAAf,CAAX,CAAT;AACA,GATD;AAUA,SAAOlC,GAAP;AACA,CAdD;;AAeAjB,MAAM,CAAC+C,MAAP,GAAgBlD,EAAE,CAACkD,MAAnB,C,CAEA;;AACAlD,EAAE,CAACuD,YAAH,GAAkB,UAASnC,GAAT,EAAc;AAC/B;AACA,MAAIoC,GAAG,GAAG,SAAV;;AACA,MAAI,MAAMC,IAAN,CAAWrC,GAAG,CAACU,GAAf,CAAJ,EAAyB;AACxB0B,IAAAA,GAAG,GAAG,SAAN;AACA;;AACD,MAAIE,OAAO,GACV,aACAtC,GAAG,CAACU,GADJ,GAEA,oBAFA,GAGAV,GAAG,CAACyB,CAHJ,GAIA,SAJA,GAKAzB,GAAG,CAACW,CALJ,GAMA,IAPD;AAQA,SAAOxB,IAAI,CAACoD,GAAL,CAASH,GAAT,EAAcE,OAAd,EAAuBvC,IAAvB,CAA4B,UAASyC,IAAT,EAAe;AACjD,WAAO9D,GAAG,CAAC+D,cAAJ,CAAmBC,UAAU,CAACC,IAAX,CAAgBH,IAAhB,CAAnB,CAAP;AACA,GAFM,CAAP;AAGA,CAjBD;;AAmBA5D,EAAE,CAACgE,UAAH,GAAgB,UAAShD,IAAT,EAAe;AAC9B,SAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,QAAIC,GAAJ;;AACA,QAAI,SAASJ,IAAI,CAACa,GAAlB,EAAuB;AACtBT,MAAAA,GAAG,GAAGJ,IAAN;AACA,KAFD,MAEO,IAAIA,IAAI,CAACI,GAAT,EAAc;AACpBA,MAAAA,GAAG,GAAGJ,IAAI,CAACI,GAAX;AACA,KAFM,MAEA;AACN,aAAOjB,MAAM,CAACoC,MAAP,CAAcvB,IAAd,EAAoBG,IAApB,CAAyB,UAASC,GAAT,EAAc;AAC7C,eAAOpB,EAAE,CAACuD,YAAH,CAAgBnC,GAAhB,CAAP;AACA,OAFM,CAAP;AAGA;;AACD,WAAOpB,EAAE,CAACuD,YAAH,CAAgBnC,GAAhB,CAAP;AACA,GAZM,CAAP;AAaA,CAdD","sourcesContent":["/*global Promise*/\n'use strict';\n\nvar Enc = require('@root/encoding');\n\nvar EC = module.exports;\nvar native = require('./lib/node/ecdsa.js');\n\n// TODO SSH\nvar SSH;\n\nvar X509 = require('@root/x509');\nvar PEM = require('@root/pem');\n//var SSH = require('./ssh-keys.js');\nvar sha2 = require('./lib/node/sha2.js');\n\n// 1.2.840.10045.3.1.7\n// prime256v1 (ANSI X9.62 named elliptic curve)\nvar OBJ_ID_EC = '06 08 2A8648CE3D030107'.replace(/\\s+/g, '').toLowerCase();\n// 1.3.132.0.34\n// secp384r1 (SECG (Certicom) named elliptic curve)\nvar OBJ_ID_EC_384 = '06 05 2B81040022'.replace(/\\s+/g, '').toLowerCase();\n\nEC._stance =\n\t\"We take the stance that if you're knowledgeable enough to\" +\n\t\" properly and securely use non-standard crypto then you shouldn't need Bluecrypt anyway.\";\nnative._stance = EC._stance;\nEC._universal =\n\t'Bluecrypt only supports crypto with standard cross-browser and cross-platform support.';\nEC.generate = native.generate;\n\nEC.export = function(opts) {\n\treturn Promise.resolve().then(function() {\n\t\tif (!opts || !opts.jwk || 'object' !== typeof opts.jwk) {\n\t\t\tthrow new Error('must pass { jwk: jwk } as a JSON object');\n\t\t}\n\t\tvar jwk = JSON.parse(JSON.stringify(opts.jwk));\n\t\tvar format = opts.format;\n\t\tif (\n\t\t\topts.public ||\n\t\t\t-1 !== ['spki', 'pkix', 'ssh', 'rfc4716'].indexOf(format)\n\t\t) {\n\t\t\tjwk.d = null;\n\t\t}\n\t\tif ('EC' !== jwk.kty) {\n\t\t\tthrow new Error(\"options.jwk.kty must be 'EC' for EC keys\");\n\t\t}\n\t\tif (!jwk.d) {\n\t\t\tif (!format || -1 !== ['spki', 'pkix'].indexOf(format)) {\n\t\t\t\tformat = 'spki';\n\t\t\t} else if (-1 !== ['ssh', 'rfc4716'].indexOf(format)) {\n\t\t\t\tformat = 'ssh';\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"options.format must be 'spki' or 'ssh' for public EC keys, not (\" +\n\t\t\t\t\t\ttypeof format +\n\t\t\t\t\t\t') ' +\n\t\t\t\t\t\tformat\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!format || 'sec1' === format) {\n\t\t\t\tformat = 'sec1';\n\t\t\t} else if ('pkcs8' !== format) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"options.format must be 'sec1' or 'pkcs8' for private EC keys, not '\" +\n\t\t\t\t\t\tformat +\n\t\t\t\t\t\t\"'\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (-1 === ['P-256', 'P-384'].indexOf(jwk.crv)) {\n\t\t\tthrow new Error(\n\t\t\t\t\"options.jwk.crv must be either P-256 or P-384 for EC keys, not '\" +\n\t\t\t\t\tjwk.crv +\n\t\t\t\t\t\"'\"\n\t\t\t);\n\t\t}\n\t\tif (!jwk.y) {\n\t\t\tthrow new Error(\n\t\t\t\t'options.jwk.y must be a urlsafe base64-encoded either P-256 or P-384'\n\t\t\t);\n\t\t}\n\n\t\tif ('sec1' === format) {\n\t\t\treturn PEM.packBlock({\n\t\t\t\ttype: 'EC PRIVATE KEY',\n\t\t\t\tbytes: X509.packSec1(jwk)\n\t\t\t});\n\t\t} else if ('pkcs8' === format) {\n\t\t\treturn PEM.packBlock({\n\t\t\t\ttype: 'PRIVATE KEY',\n\t\t\t\tbytes: X509.packPkcs8(jwk)\n\t\t\t});\n\t\t} else if (-1 !== ['spki', 'pkix'].indexOf(format)) {\n\t\t\treturn PEM.packBlock({\n\t\t\t\ttype: 'PUBLIC KEY',\n\t\t\t\tbytes: X509.packSpki(jwk)\n\t\t\t});\n\t\t} else if (-1 !== ['ssh', 'rfc4716'].indexOf(format)) {\n\t\t\treturn SSH.packSsh(jwk);\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t'Sanity Error: reached unreachable code block with format: ' +\n\t\t\t\t\tformat\n\t\t\t);\n\t\t}\n\t});\n};\nnative.export = EC.export;\n\nEC.import = function(opts) {\n\treturn Promise.resolve().then(function() {\n\t\tif (!opts || !opts.pem || 'string' !== typeof opts.pem) {\n\t\t\tthrow new Error('must pass { pem: pem } as a string');\n\t\t}\n\t\tif (0 === opts.pem.indexOf('ecdsa-sha2-')) {\n\t\t\t//return SSH.parseSsh(opts.pem);\n\t\t\tthrow new Error('SSH not yet re-supported');\n\t\t}\n\t\tvar pem = opts.pem;\n\t\tvar u8 = PEM.parseBlock(pem).bytes;\n\t\tvar hex = Enc.bufToHex(u8);\n\t\tvar jwk = { kty: 'EC', crv: null, x: null, y: null };\n\n\t\t//console.log();\n\t\tif (\n\t\t\t-1 !== hex.indexOf(OBJ_ID_EC) ||\n\t\t\t-1 !== hex.indexOf(OBJ_ID_EC_384)\n\t\t) {\n\t\t\tif (-1 !== hex.indexOf(OBJ_ID_EC_384)) {\n\t\t\t\tjwk.crv = 'P-384';\n\t\t\t} else {\n\t\t\t\tjwk.crv = 'P-256';\n\t\t\t}\n\n\t\t\t// PKCS8\n\t\t\tif (0x02 === u8[3] && 0x30 === u8[6] && 0x06 === u8[8]) {\n\t\t\t\t//console.log(\"PKCS8\", u8[3].toString(16), u8[6].toString(16), u8[8].toString(16));\n\t\t\t\tjwk = X509.parsePkcs8(u8, jwk);\n\t\t\t\t// EC-only\n\t\t\t} else if (0x02 === u8[2] && 0x04 === u8[5] && 0xa0 === u8[39]) {\n\t\t\t\t//console.log(\"EC---\", u8[2].toString(16), u8[5].toString(16), u8[39].toString(16));\n\t\t\t\tjwk = X509.parseSec1(u8, jwk);\n\t\t\t\t// EC-only\n\t\t\t} else if (0x02 === u8[3] && 0x04 === u8[6] && 0xa0 === u8[56]) {\n\t\t\t\t//console.log(\"EC---\", u8[3].toString(16), u8[6].toString(16), u8[56].toString(16));\n\t\t\t\tjwk = X509.parseSec1(u8, jwk);\n\t\t\t\t// SPKI/PKIK (Public)\n\t\t\t} else if (0x30 === u8[2] && 0x06 === u8[4] && 0x06 === u8[13]) {\n\t\t\t\t//console.log(\"SPKI-\", u8[2].toString(16), u8[4].toString(16), u8[13].toString(16));\n\t\t\t\tjwk = X509.parseSpki(u8, jwk);\n\t\t\t\t// Error\n\t\t\t} else {\n\t\t\t\t//console.log(\"PKCS8\", u8[3].toString(16), u8[6].toString(16), u8[8].toString(16));\n\t\t\t\t//console.log(\"EC---\", u8[2].toString(16), u8[5].toString(16), u8[39].toString(16));\n\t\t\t\t//console.log(\"EC---\", u8[3].toString(16), u8[6].toString(16), u8[56].toString(16));\n\t\t\t\t//console.log(\"SPKI-\", u8[2].toString(16), u8[4].toString(16), u8[13].toString(16));\n\t\t\t\tthrow new Error('unrecognized key format');\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Supported key types are P-256 and P-384');\n\t\t}\n\t\tif (opts.public) {\n\t\t\tif (true !== opts.public) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'options.public must be either `true` or `false` not (' +\n\t\t\t\t\t\ttypeof opts.public +\n\t\t\t\t\t\t\") '\" +\n\t\t\t\t\t\topts.public +\n\t\t\t\t\t\t\"'\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tdelete jwk.d;\n\t\t}\n\t\treturn jwk;\n\t});\n};\nnative.import = EC.import;\n\nEC.pack = function(opts) {\n\treturn Promise.resolve().then(function() {\n\t\treturn EC.export(opts);\n\t});\n};\n\n// Chopping off the private parts is now part of the public API.\n// I thought it sounded a little too crude at first, but it really is the best name in every possible way.\nEC.neuter = function(opts) {\n\t// trying to find the best balance of an immutable copy with custom attributes\n\tvar jwk = {};\n\tObject.keys(opts.jwk).forEach(function(k) {\n\t\tif ('undefined' === typeof opts.jwk[k]) {\n\t\t\treturn;\n\t\t}\n\t\t// ignore EC private parts\n\t\tif ('d' === k) {\n\t\t\treturn;\n\t\t}\n\t\tjwk[k] = JSON.parse(JSON.stringify(opts.jwk[k]));\n\t});\n\treturn jwk;\n};\nnative.neuter = EC.neuter;\n\n// https://stackoverflow.com/questions/42588786/how-to-fingerprint-a-jwk\nEC.__thumbprint = function(jwk) {\n\t// Use the same entropy for SHA as for key\n\tvar alg = 'SHA-256';\n\tif (/384/.test(jwk.crv)) {\n\t\talg = 'SHA-384';\n\t}\n\tvar payload =\n\t\t'{\"crv\":\"' +\n\t\tjwk.crv +\n\t\t'\",\"kty\":\"EC\",\"x\":\"' +\n\t\tjwk.x +\n\t\t'\",\"y\":\"' +\n\t\tjwk.y +\n\t\t'\"}';\n\treturn sha2.sum(alg, payload).then(function(hash) {\n\t\treturn Enc.bufToUrlBase64(Uint8Array.from(hash));\n\t});\n};\n\nEC.thumbprint = function(opts) {\n\treturn Promise.resolve().then(function() {\n\t\tvar jwk;\n\t\tif ('EC' === opts.kty) {\n\t\t\tjwk = opts;\n\t\t} else if (opts.jwk) {\n\t\t\tjwk = opts.jwk;\n\t\t} else {\n\t\t\treturn native.import(opts).then(function(jwk) {\n\t\t\t\treturn EC.__thumbprint(jwk);\n\t\t\t});\n\t\t}\n\t\treturn EC.__thumbprint(jwk);\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}